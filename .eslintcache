[{"/Users/ronezra/Projects/new-project/my-app/src/index.js":"1","/Users/ronezra/Projects/new-project/my-app/src/App.js":"2","/Users/ronezra/Projects/new-project/my-app/src/Header.js":"3"},{"size":221,"mtime":1608546433993,"results":"4","hashOfConfig":"5"},{"size":1537,"mtime":1608724288585,"results":"6","hashOfConfig":"5"},{"size":707,"mtime":1608726163292,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1mrwwwq",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ronezra/Projects/new-project/my-app/src/index.js",[],["15","16"],"/Users/ronezra/Projects/new-project/my-app/src/App.js",["17","18","19","20"],"/Users/ronezra/Projects/new-project/my-app/src/Header.js",["21"],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":26,"column":9,"nodeType":"28","endLine":26,"endColumn":34},{"ruleId":"29","severity":1,"message":"30","line":27,"column":10,"nodeType":"31","messageId":"32","endLine":27,"endColumn":15},{"ruleId":"29","severity":1,"message":"33","line":27,"column":17,"nodeType":"31","messageId":"32","endLine":27,"endColumn":25},{"ruleId":"34","severity":1,"message":"35","line":67,"column":38,"nodeType":"36","messageId":"37","endLine":67,"endColumn":40},{"ruleId":"26","severity":1,"message":"38","line":8,"column":15,"nodeType":"39","endLine":19,"endColumn":6},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"react-hooks/exhaustive-deps","The 'namesFromServer' array makes the dependencies of useEffect Hook (at line 39) change on every render. To fix this, wrap the initialization of 'namesFromServer' in its own useMemo() Hook.","VariableDeclarator","no-unused-vars","'names' is assigned a value but never used.","Identifier","unusedVar","'setNames' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]